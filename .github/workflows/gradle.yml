# HackBar Burp Extension - CI/CD Workflow
# 基于 GitHub 官方文档的 Java with Gradle 工作流模板

name: Build and Test HackBar

# 触发条件
on:
  # 当推送到主分支时触发
  push:
    branches: [ "main", "master" ]
  # 当创建 Pull Request 到主分支时触发
  pull_request:
    branches: [ "main", "master" ]
  # 允许手动触发工作流
  workflow_dispatch:

# 设置权限
permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        # 主要针对 Java 8，同时测试 Java 11 兼容性
        java-version: ['8', '11']
    
    steps:
    # 检出代码
    - name: Checkout repository
      uses: actions/checkout@v4
    
    # 设置 Java 环境
    - name: Set up JDK ${{ matrix.java-version }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ matrix.java-version }}
        distribution: 'temurin'
        architecture: x64
    
    # 设置 Gradle 环境（包含缓存）
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v4
      with:
        # 启用构建扫描以获得更好的构建洞察
        build-scan-publish: true
        build-scan-terms-of-use-url: "https://gradle.com/terms-of-service"
        build-scan-terms-of-use-agree: "yes"
    
    # 验证 Gradle Wrapper
    - name: Validate Gradle wrapper
      uses: gradle/actions/wrapper-validation@v4
    
    # 构建项目
    - name: Build with Gradle
      run: ./gradlew build --no-daemon
    
    # 运行测试（如果有的话）
    - name: Run tests
      run: ./gradlew test --no-daemon
      continue-on-error: true
    
    # 生成 JAR 文件
    - name: Build JAR
      run: ./gradlew jar --no-daemon
    
    # 上传构建产物
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: hackbar-jar-java-${{ matrix.java-version }}
        path: |
          build/libs/*.jar
          build/reports/
        retention-days: 30
    
    # 上传测试报告（如果测试失败）
    - name: Upload test reports
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: test-reports-java-${{ matrix.java-version }}
        path: build/reports/tests/
        retention-days: 7

  # 代码质量检查作业
  code-quality:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        java-version: '11'
        distribution: 'temurin'
    
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v4
    
    # 运行代码质量检查
    - name: Run code quality checks
      run: ./gradlew check --no-daemon
      continue-on-error: true
    
    # 如果有 SpotBugs 或其他静态分析工具，可以在这里添加
    # - name: Run SpotBugs
    #   run: ./gradlew spotbugsMain --no-daemon
    
    - name: Upload quality reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: quality-reports
        path: build/reports/
        retention-days: 7

  # 发布作业（仅在主分支且构建成功时运行）
  release:
    runs-on: ubuntu-latest
    needs: [build, code-quality]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        java-version: '11'
        distribution: 'temurin'
    
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v4
    
    - name: Build release JAR
      run: ./gradlew clean build jar --no-daemon
    
    # 下载之前构建的产物
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: hackbar-jar-java-11
        path: artifacts/
    
    # 创建发布（可选，需要配置 GitHub Token）
    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: HackBar ${{ github.ref }}
        draft: false
        prerelease: false
    
    # 上传最终的发布产物
    - name: Upload final artifacts
      uses: actions/upload-artifact@v4
      with:
        name: hackbar-release
        path: build/libs/*.jar
        retention-days: 90